@model DivinityLights.Web.Models.ProductViewModel
@using System.Configuration;
@using DivinityLights.Web.Common
@using DivinityLights.Web.Models

@{ Html.EnableClientValidation(); }
<div class="row">

    @using (Html.BeginForm(Actions.AddEdit, Controllers.ProductController, FormMethod.Post, new { enctype = "multipart/form-data", id = "frmProduct" }))
    {

        <div class="field-detail  col-md-12">
            <input id="btnSave" type="submit" value="Save" title="Save" class="js-loadSpinner" />
        </div>
        @Html.HiddenFor(model => model.Id)

        @Html.Hidden("page", @Request.QueryString["page"])

        <div class="field-detail col-md-6">
            <span class="field-title">@Html.LabelFor(model => model.CategoryList) </span>
            <span class="field-value">
                @Html.DropDownListFor(model => model.CategoryId, Model.CategoryList, "Select Category", new { id = "ddlCategory" })
                <br />
                @Html.ValidationMessageFor(model => model.CategoryId)
            </span>
        </div>
        <div class="field-detail  col-md-6">
            <span class="field-title">
                @Html.LabelFor(model => model.Name)
            </span>
            <span class="field-value">
                @Html.TextBoxFor(model => model.Name, new { id = "txtName" })
                <br />
                @Html.ValidationMessageFor(model => model.Name)
            </span>
        </div>
        <div class="field-detail  col-md-6">
            <span class="field-title">@Html.LabelFor(model => model.Code) </span>
            <span class="field-value">
                @Html.TextBoxFor(model => model.Code, new { id = "txtCode" })
                <br />
                @Html.ValidationMessageFor(model => model.Code)
            </span>
        </div>
        <div class="field-detail  col-md-6">
            <span class="field-title">@Html.LabelFor(model => model.Dimensions) </span>
            <span class="field-value">
                @Html.TextBoxFor(model => model.Dimensions, new { id = "txtDimensions" })
                <br />
                @Html.ValidationMessageFor(model => model.Dimensions)
            </span>
        </div>
        <div class="col-md-6">
            <div class="field-detail">
                <span class="field-title">@Html.LabelFor(model => model.LightSource)</span>
                <span class="field-value">
                    @Html.TextBoxFor(model => model.LightSource, new { id = "txtLightSource" })
                    <br />
                    @Html.ValidationMessageFor(model => model.LightSource)
                </span>
            </div>
            <div class="field-detail">
                <span class="field-title">@Html.LabelFor(model => model.Material)</span>
                <span class="field-value">
                    @Html.TextBoxFor(model => model.Material, new { id = "txtMaterial" })
                    <br />
                    @Html.ValidationMessageFor(model => model.Material)
                </span>
            </div>
            <div class="field-detail">
                <span class="field-title">@Html.LabelFor(model => model.ColorTemperature)</span>
                <span class="field-value">
                    @Html.TextBoxFor(model => model.ColorTemperature, new { id = "txtColorTemperature" })
                    <br />
                    @Html.ValidationMessageFor(model => model.ColorTemperature)
                </span>
            </div>
            <div class="field-detail">
                <span class="field-title">@Html.LabelFor(model => model.Wattage)</span>
                <span class="field-value">
                    @Html.TextBoxFor(model => model.Wattage, new { id = "txtWattage" })
                    <br />
                    @Html.ValidationMessageFor(model => model.Wattage)
                </span>
            </div>
            <div class="field-detail">
                <span class="field-title">@Html.LabelFor(model => model.Mounting)</span>
                <span class="field-value">
                    @Html.TextBoxFor(model => model.Mounting, new { id = "txtMounting" })
                    <br />
                    @Html.ValidationMessageFor(model => model.Mounting)
                </span>
            </div>
            <div class="field-detail">
                <span class="field-title"><label>Product Images</label></span>
                <span class="field-value">
                    <input type="file" id="fileToUploads"
                           name="fileUploads" multiple="multiple" />
                </span>
            </div>
            <div class="field-detail">
                <div>
                    @if (Model.Images != null && Model.Images.Count > 0)
                    {
                        <div id="img-lst" class="img-lst">
                            <ul>
                                @for (int i = 0; i < Model.Images.Count; i++)
                                {
                                    <li>
                                        <a href="">
                                            <img id="imgProduct" width="100" height="100" src="@Url.Content(Model.Images[i].Image)" />
                                            @Html.HiddenFor(model => model.Images[i].Image)
                                        </a>
                                    </li>
                                }
                            </ul>
                            <br style="clear:both">
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="field-detail  col-md-6">
            <span class="field-title">@Html.LabelFor(model => model.Desc)</span>
            <span class="field-value">@Html.TextAreaFor(model => model.Desc, new { id = "txtDesc" })</span>
        </div>
    }
</div>
<script src="~/scripts/tinymce/tinymce.min.js"></script>
<script type="text/javascript">
    // Initialize your tinyMCE Editor with your preferred options
    tinyMCE.init({
        // General options
        mode: "textareas",
        theme: "modern",
        // Theme options
        theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
        theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
        theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
        theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: true,
    });
    $(function () {

        $(".js-loadSpinner").click(function (e) {
            var form = $("#frmProduct");
            if (form.valid()) {
                $("html").addClass('loading');
            }
        });
    });
</script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>